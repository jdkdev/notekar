@use "sass:math";

$unit: 1rem;
$block: $unit * 8;

$bl: $block;
$sec: $block * 2;
$xxs: $block * 3;
$xs: $block * 4;
$sm: $block * 5;
$md: $block * 6;
$lm: $block * 7;
$lg: $block * 8;
$xl: $block * 9;
$xxl: $block * 10;
$huge: $block * 20;

$bps: (
  'bl': $bl,
  'sec': $sec,
  'xxs': $xxs,
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'lm': $lm,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl,
  'huge': $huge
);

// Core Mixins
@mixin g-span($start: start, $end: end) {
  grid-column-start: $start;
  grid-column-end: $end;
}

@mixin min-bp($bp) {
  @if map-has-key($bps, $bp) {
    @media (min-width: #{map-get($bps, $bp)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin max-bp($bp) {
  @if map-has-key($bps, $bp) {
    @media (max-width: #{map-get($bps, $bp)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin d-grid-display($bp) {
  $bp-count: map-get($bps, $bp) / $block;
  $bp-2: $block;
  display: grid;
  grid-template-columns: [start] repeat(auto-fit, minmax($bp-2, 1fr)) [end];
  .gx-span-full {
    grid-column-start: 1;
    grid-column-end: -1;
  }
  .gx-span-1 {
    grid-column: span 1;
  }
  .gx-span-2 {
    grid-column: span 2;
  }
  .gx-span-3 {
    grid-column: span 3;
  }
  .gx-span-4 {
    grid-column: span 4;
  }
  .gx-span-half {
    grid-column: span floor($bp-count / 2);
  }
  .gx-span-quarter {
    grid-column: span floor($bp-count / 4);
  }
  .gx-span-eighth {
    grid-column: span floor($bp-count / 8);
  }
}

@mixin bp-utils($bp) {
  .#{$bp}-display-none {
    display: none;
  }
  .#{$bp}-display {
    display: unset;
  }
  .#{$bp}-w-max {
    max-width: #{map-get($bps, $bp)};
  }
  .#{$bp}-display-grid {
    @include d-grid-display($bp);
  }
  .#{$bp}-font-size-smaller {
    font-size: 0.8em;
  }
  .#{$bp}-font-size-larger {
    font-size: 1.2em;
  }
}

@mixin bp($start, $stop: huge) {
  @include max-bp($stop) {
    @include min-bp($start) {
      @include bp-utils($start);
      @content;
    }
  }
}

// Child Mixins
@mixin bl($stop: huge) {
  @include bp(bl, $stop) {
    @content;
  }
}
@mixin sec($stop: huge) {
  @include bp(sec, $stop) {
    @content;
  }
}
@mixin xxs($stop: huge) {
  @include bp(xxs, $stop) {
    @content;
  }
}
@mixin xs($stop: huge) {
  @include bp(xs, $stop) {
    @content;
  }
}
@mixin sm($stop: huge) {
  @include bp(sm, $stop) {
    @content;
  }
}
@mixin md($stop: huge) {
  @include bp(md, $stop) {
    @content;
  }
}
@mixin lm($stop: huge) {
  @include bp(lm, $stop) {
    @content;
  }
}
@mixin lg($stop: huge) {
  @include bp(lg, $stop) {
    @content;
  }
}
@mixin xl($stop: huge) {
  @include bp(xl, $stop) {
    @content;
  }
}
@mixin xxl($stop: huge) {
  @include bp(xxl, $stop) {
    @content;
  }
}

@mixin bps-debug-utils($bp, $color) {
  $breakpoint: map-get($bps, $bp) / $block;
  // $breakpoint: (map-get($bps, $bp) * 2);
  // $breakpoint: 2 + 2;
  border: 3px solid $color;
  &::before {
    background-color: $color;
    display: block;
    width: 100%;
    content: '#{$bp}@min-width #{map-get($bps, $bp)}  -- #{$breakpoint} blocks wide';
    grid-column: 1 / -1;
  }
}
@mixin bps-debug {
  .bps-debug {
    @media (max-width: 370px) {
      // Show that we don't need to size for this small
      display: none;
    }
    border: 3px solid violet; //less than 385px
    @include xxs {
      @include bps-debug-utils(xxs, green);
    }
    @include xs {
      @include bps-debug-utils(xs, red);
    }
    @include sm {
      @include bps-debug-utils(sm, orange);
    }
    @include md {
      @include bps-debug-utils(md, yellow);
    }
    @include lm {
      @include bps-debug-utils(lm, green);
    }
    @include lg {
      @include bps-debug-utils(lg, blue);
    }
    @include xl {
      @include bps-debug-utils(xl, indigo);
    }
    @include xxl {
      @include bps-debug-utils(xxl, violet);
    }
  }
}

/* Example
* You can use @include bp({start}, {stop})
* or an single breakpoint @include sm({stop})


.example {
  @include bl(sec) {
    
  }
   @include xs(md) {
    .item {
      background-color: blue;
    }
  }
  @include md(xl) {
    .item {
      background-color: green;
    }
  }
   @include xl {
    .item {
      background-color: red;
    }
  }
}

@mixin site-layout() {
  //DEFAULT
  display: flex;
  flex-flow: column;
  .links {
    display: none;
  }

  // XXS
  @include xxs { }
  // XS
  @include xs { }

  // SM
  @include sm {
    display: grid;
    grid: [start] 1fr [end] / [start] 
      repeat(auto-fit, minmax($block, 1fr)) [end]; 
    
    .search {
      grid-column: start / span 2;
    }
    .footer {
      grid-column: start / end;
    }
    .links {
      display: block;
      @include g-span;
    }
    .content {
      @include g-span(3, end);
    }
  }

  // MD
  @include md {
    .content {
      @include g-span(3, -2);
    }
    .links {
      @include g-span(-2, -1);
    }
  }

  // ML
  @include ml { }
  // LG
  @include lg { }
  // XL
  @include xl { }
  // XXL
  @include xxl { }
  
}

.app {
  height: 100%;
  font-size: 22px;
  @include template;
  @include site-layout;
}

*/

@mixin site-layout {
  .display-none {
    display: none;
  }
  @include xxs {
  }
  @include xs {
  }
  @include sm {
  }
  @include md {
  }
  @include lm {
  }
  @include lg {
  }
  @include xl {
  }
  @include xxl {
  }
}
